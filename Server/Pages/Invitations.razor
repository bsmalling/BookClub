@page "/invitations"
@using BookClub.Models
@using BookClub.Services.Interfaces
@using Microsoft.AspNetCore.Identity;
@inject IUserService userService
@inject IInvitationService invitationService
@inject UserManager<Areas.Identity.AppUser> userManager

<PageTitle>Invitations</PageTitle>

<RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize="5"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@invitations"
                TItem="Invitation"
                LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Invitation" Property="Code" Title="Code" Width="100px" />
        <RadzenDataGridColumn TItem="Invitation" Property="Expiration" Title="Expiration" Width="100px" FormatString="{0:MM/dd/yyyy}" />
        <RadzenDataGridColumn TItem="Invitation" Property="Claimed" Title="Claimed" Width="100px" />
        <RadzenDataGridColumn TItem="Invitation" Property="Notes" Title="Notes" Width="200px" />
    </Columns>
</RadzenDataGrid>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<Invitation>? invitations;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        User? user = GetUserAsync().Result;
        if (user != null)
            invitations = invitationService.ReadByUser(user.Id);
        else
            invitations = new List<Invitation>();
    }

    private async Task<User?> GetUserAsync()
    {
        // Try getting the AppUser
        var claimsPrinciple = (await authenticationStateTask).User;
        var appUser = userManager.GetUserAsync(claimsPrinciple).Result;
        if (appUser == null) return null;

        return userService.GetByAspNetId(appUser.Id);
    }

}
